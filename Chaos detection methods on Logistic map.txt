
SetDirectory[NotebookDirectory[]];

tA[] := (CasZ = SessionTime[]; 
      DateZ = 
    DateString[{ "Start ", "Time", " ", "DayName", " ", "Day", "/", 
            "Month"}]; Date1 = Date[];);
tB[] := (CasK = SessionTime[]; 
      DateK = 
    DateString[{ "Konec ", "Time", " ", "DayName", " ", "Day", "/", 
            "Month"}]; Date2 = Date[];
      Print[
    DateString[Date2 - Date1, { "TIME", " ", "Time", " ", "Day"}] <> 
          "  #  " <> DateZ <> " / " <> DateK];);



(*Chaos detection methods*)

(*1. Box - counting method*)


    Block[{tmp, delta, nmax, l, i}, tmp = {};
      
      delta = delta0;
      nmax = Abs[Ceiling[Log[min/delta0]/Log[scale]]];
      
      Do[
        {
          l = Length[Complement[Ceiling[list/delta], tmp]];
          AppendTo[tmp, {delta, l}];
          delta = delta* scale
          },
        {i, 1, nmax}];
      
      Return[tmp]];  
odhadDimenze[{x_, y_}] := 
    N[{-Log[10, x], 
        Log[10, 
     y]}]; 

BoxCount1[dataa_] := (
      Clear[x, EHM, EHM0, EHM1, EHM2, EHM3, n2, n1];
      
      EHM = BoxCount[(dataa/Max[dataa]) + 0., 1.0, 0.5, 0.001];
      EHM1 = Map[odhadDimenze, EHM];
      EHM1;
      EHM2 = Fit[Take[EHM1, Take[Length[EHM1]]], {1, x}, x];
      EHM2;
      If[Length[EHM2] < 1, 0,
        EHM3 = Take[EHM2, -1]/x;
        EHM3 ]
      );

 (*BoxCount1[dataa_]:=(
Clear[x,EHM,EHM5,EHM1,EHM2,EHM3,n,n1];
Module[{n,EHM1,EHM2,EHM3,EHM4,EHM5},
dataaa=  EMB3[dataa];
EHM =BoxCount[dataaa,1.0,0.5,0.0000000000001];

EHM1=Map[odhadDimenze,EHM];
EHM1;
n=1;
While[EHM1[[n]][[2]]  \[NotEqual]  EHM1[[n+1]][[2]],n ;n++];
EHM5= Take[EHM1,n-1];
EHM2 = Fit[Take[EHM5,Take[Length[EHM5]]],{1,x},x];
EHM2;
If[Length[EHM2]<1,0,
EHM3 = Take[EHM2,-1]/x;
EHM3 ]]
);*)

(*Correlation dimension D2*)

corrDIMdim[
   DData_] := ((*test version*)
      Clear[my, x, CDIM, fit, r, nF, i];
      my = Log[10, 
          N[Module[{nF = Nearest[DData -> Automatic]}, 
              Table[{r, 
                  
         Tr[Table[
           Tr[UnitStep[nF[DData[[i]], {All, r}] - i - 1]], {i, 1, 
                        Length[DData]}]]}, {r, 0.001, 0.011, 
         0.001}]]]];
      fit = Fit[my, {1, x}, x];
      
      If[Length[fit] < 1, 0,
        CDIM = Take[fit, -1]/x;
        CDIM  ]
      
      );






er[dat_] :=  
  (ST = StandardDeviation[dat];
    cor[min_, max_, fac_] :=  
      min*( fac ^Range[Floor[Log[ max/ min] / Log[fac]]]);
    cor[0.1*ST, 0.5*ST, 1.03])

 (*data={Drop[dataa,-1],Drop[dataa,1]}\[Transpose];
data={Drop[dataa,-2],Take[dataa,{2,-2}],Drop[dataa,2]}\[Transpose];*)

EMB1[dataa_] := (
      data = {Drop[dataa, -1], Drop[dataa, 1]}\[Transpose]
      );


EMB3[data_] := {Drop[data, -2], Take[data, {2, -2}], 
        Drop[data, 2]}\[Transpose];





 (* corrDIMdim1[dataa_]:=(
correlationSum[data_,\[Tau]_,mMax_,min\[CapitalDelta]t_Integer?(#\
\[GreaterEqual]1&),minExp_,maxExp_,nExp_]:=
Table[Module[{emb,nn,ed,bin,di},
emb=ParallelTable[Take[data,{i,i+\[Tau](m-1),\[Tau]}],{i,Length[data]-\
\[Tau](\
m-1)}];
nn=Length[emb];
ed=Flatten[ParallelTable[di=emb\[LeftDoubleBracket]i\
\[RightDoubleBracket];
EuclideanDistance[di,#]&/@Take[emb,{i+min\[CapitalDelta]t,nn}],{i,nn-\
min\
\[CapitalDelta]t}]];
bin=N@Binomial[nn-min\[CapitalDelta]t+1,2];
{10.^#,Total[UnitStep[(10.^#)-ed]]/bin}&/@Range[minExp,maxExp,(maxExp-\
minExp)/\
(nExp-1)]],
{m,mMax}];
fit = Fit[Flatten[Log[correlationSum[dataa,1,1,1,-3,0.1,11]],1],{1,x},\
x];
If[Length[fit]\[Equal]0,0,fit[[2]]/x]
);*)

corrDIMdim1[dataa_] := (
       correlationSum[data_, \[Tau]_, mMax_, 
           min\[CapitalDelta]t_Integer?(# >= 1 &), minExp_, maxExp_, 
      nExp_] :=
         Table[Module[{emb, nn, ed, bin, di},
             emb = 
               Table[Take[data, {i, i + \[Tau] (m - 1), \[Tau]}], {i, 
                   Length[data] - \[Tau] (m - 1)}];
             nn = Length[emb];
             ed = Flatten[Table[di = emb[[i]];
                   EuclideanDistance[di, #] & /@ 
                     Take[emb, {i + min\[CapitalDelta]t, nn}], {i, 
                     nn - min\[CapitalDelta]t}]];
             bin = N@Binomial[nn - min\[CapitalDelta]t + 1, 2];
             {10.^#, Total[UnitStep[(10.^#) - ed]]/bin} & /@ 
               Range[minExp, maxExp, (maxExp - minExp)/(nExp - 1)]],
           {m, mMax}];
       fit = Fit[
           
      Flatten[Log[correlationSum[dataa, 1, 1, 1, -3, 0.1, 11]], 
       1], {1, x}, x];
       If[Length[fit] == 0, 0, fit[[2]]/x]);


 (* corrDIMdim1[dataa_,em_,dtim_]:=(
 correlationSum[data_,\[Tau]_,mMax_,min\[CapitalDelta]t_Integer?(#\
 \[GreaterEqual]1&),minExp_,maxExp_,nExp_]:=
 Table[Module[{emb,nn,ed,bin,di},
 emb=Table[Take[data,{i,i+\[Tau](m-1),\[Tau]}],{i,Length[data]-\[Tau](\
m-1)}];
 nn=Length[emb];
 ed=Flatten[Table[di=emb\[LeftDoubleBracket]i\[RightDoubleBracket];
 EuclideanDistance[di,#]&/@Take[emb,{i+min\[CapitalDelta]t,nn}],{i,nn-\
min\
 \[CapitalDelta]t}]];
 bin=N@Binomial[nn-min\[CapitalDelta]t+1,2];
 {10.^#,Total[UnitStep[(10.^#)-ed]]/bin}&/@Range[minExp,maxExp,(\
maxExp-minExp)/\
 (nExp-1)]],
 {m,mMax}];
 fit = Fit[DeleteCases[Log10[correlationSum[dataa,dtim,em,1,-3,0.1,11]\
[[em]]],{\
 _,Indeterminate}],{1,x},x];
 If[Length[fit]\[Equal]0,0,fit[[2]]/x]
 );*)
 
 
 falseNearestNeighbors[data_, \[Tau]_, mMax_, T1_, T2_] := 
    Module[{emb, m, n, \[Sigma], count, nf, x, yPos, y, Rm, incr},
      emb = Table[
          Table[Take[data, {i, i + \[Tau] (m - 1), \[Tau]}], {i, 
              Length[data] - \[Tau] (m - 1)}], {m, mMax + 1}];
      n = Length /@ emb;
      \[Sigma] = StandardDeviation[data];
      Table[count = 0;
        nf = Nearest[emb[[m]] -> Range[n[[m]]]];
        Do[x = emb[[m, i]];
          yPos = Last[nf[x, 2]];
          If[yPos <= n[[m]] - \[Tau], y = emb[[m, yPos]], Continue[]];
          Rm = EuclideanDistance[x, y];
          incr = Abs[Last[emb[[m + 1, i]]] - Last[emb[[m + 1, yPos]]]];
          
      Quiet@If[incr/Rm > T1 || incr/\[Sigma] > T2, 
        count = count + 1], {i, 
            n[[m + 1]]}];
        {m, N[count/n[[m + 1]]]}, {m, mMax}]]


corrDIMdim1[dataa_] := (
      correlationSum[data_, \[Tau]_, mMax_, 
          min\[CapitalDelta]t_Integer?(# >= 1 &), minExp_, maxExp_, 
     nExp_] :=
        Table[Module[{emb, nn, ed, bin, di},
            emb = 
              Table[Take[data, {i, i + \[Tau] (m - 1), \[Tau]}], {i, 
                  Length[data] - \[Tau] (m - 1)}];
            nn = Length[emb];
            ed = Flatten[Table[di = emb[[i]];
                  EuclideanDistance[di, #] & /@ 
                    Take[emb, {i + min\[CapitalDelta]t, nn}], {i, 
                    nn - min\[CapitalDelta]t}]];
            bin = N@Binomial[nn - min\[CapitalDelta]t + 1, 2];
            {10.^#, Total[UnitStep[(10.^#) - ed]]/bin} & /@ 
              Range[minExp, maxExp, (maxExp - minExp)/(nExp - 1)]],
          {m, mMax}];
      
      n = 1;
      While[
    falseNearestNeighbors[dataa, 1, 5, 15, 2][[n]][[2]] != 0 && 
     n < 5, n;
         n++];
      fit = Fit[
          DeleteCases[
            
      Log10[correlationSum[dataa, 1, n, 20, -3, 0.5, 18][[n]]], {_, 
              Indeterminate}], {1, x}, x];
      If[Length[fit] == 0, 0, fit[[2]]/x]
      );

  (*averageMutualInformation[data_,\[Tau]Max_,binWidth_]:=
  Module[{iter,n=Length[\
  data],pi,pij},
  ParallelTable[iter={Min[data],Max[data]+binWidth,binWidth};
  pi=N[BinCounts[data,iter]/n];
  pij=N[BinCounts[{Drop[data,-\[Tau]],Drop[data,\[Tau]]}\[Transpose],
  iter,iter]/\
  (n-\[Tau])];
  {\[Tau],Total[DeleteCases[Flatten[pij \
  Log2[pij/KroneckerProduct[pi,pi]]],
  Indeterminate|\[Infinity]]]},{\[Tau],0,\
  \[Tau]Max}]]*)
  
  (*corrDIMdim1[data_]:=
  (
  dataa =  EMB3[data];
  m=Table[{r,Total[Table[Length[Drop[Nearest[Drop[dataa,i-1],
  dataa[[i]],{All,r}]\
  ,1]],{i,1,Length[dataa]}]]},{r,er[data]}];
  fit=Fit[Log[10,m],{1,x},x];
  If[Length[fit]<1,0,
  CDIM = Take[fit,-1]/x;
  CDIM  ]);*)
  

   

    corrDIMdim1[data_] :=
       (dataaa =  data/ Max[data];
         dataa =  EMB3[dataaa];
         (m = Table[{r, 
                 Total[Table[
                     
            Length[Drop[
              Nearest[Drop[dataa, i - 1], dataa[[i]], {All, r}], 
                         1]], {i, 1, Length[dataa]}]]}, {r, 0.001, 
          0.011, 0.001}];
           fit = Fit[Log[10, m], {1, x}, x];
           
           If[Length[fit] < 1, 0,
             CDIM = Take[fit, -1]/x;
             CDIM  ]));


corrDIMdim1[data_] :=
     (dataaa = data/ Max[data];
       dataa =  EMB3[dataaa];
       (m = Table[{r, 
               Total[Table[
                   
          Length[Drop[
            Nearest[Drop[dataa, i - 1], dataa[[i]], {All, r}], 
                       1]], {i, 1, Length[dataa]}]]}, {r, 0.001, 
        0.011, 0.001}];
         
         m = DeleteCases[m, {_, 0}];
         
         fit = Fit[Log[10, m], {1, x}, x];
         
         If[Length[fit] < 1, 0,
           CDIM = Take[fit, -1]/x;
           CDIM  ]));


(* Lyapunov exponent*)

Lyapun1[dataa_] := ( 
       Clear[x, EHM, EHM0, EHM1, EHM2, EHM3, n2, n1, DaTA];
       Lya[data_, \[Tau]_, mMax_, \[Epsilon]_, \[Delta]Max_, h_] :=
         Table[Module[{emb, nn, nf, neigh},
             emb = 
               Table[Take[data, {i, i + \[Tau] (m - 1), \[Tau]}], {i, 
                   Length[data] - \[Tau] (m - 1)}];
             nn = Length[emb];
             nf = Nearest[emb -> Range[nn]];
             neigh = 
               
        Table[DeleteCases[
          Rest[nf[emb[[t]], {\[Infinity], \[Epsilon]}]], 
                   p_ /; p > nn - \[Delta]Max], {t, nn - \[Delta]Max}];
             Table[{\[Delta], Mean[DeleteCases[
                     Table[If[Length[neigh[[t]]] == 0, "d",
                         
                         Log[Mean[
                             
               Abs[data[[t + (m - 1) \[Tau] + \[Delta]]] - 
                                 
                 data[[neigh[[t]] + (m - 1) \[Tau] + \[Delta]]]]]]],
                       {t, nn - \[Delta]Max}], "d" | Indeterminate]]},
               {\[Delta], 0, \[Delta]Max}]], {m, mMax}];
       s = Lya[dataa, 1, 1, 0.001, 20, 1];
       ll = Fit[s[[1]], {1, x}, x][[2]]/x
       );

 Lyapun2[dataa_] := (
      Lya[data_, \[Tau]_, mMax_, \[Epsilon]_, \[Delta]Max_, h_] :=
        Table[Module[{emb, nn, nf, neigh},
            emb = 
              Table[Take[data, {i, i + \[Tau] (m - 1), \[Tau]}], {i, 
                  Length[data] - \[Tau] (m - 1)}];
            nn = Length[emb];
            nf = Nearest[emb -> Range[nn]];
            neigh = 
              
       Table[DeleteCases[
         Rest[nf[emb[[t]], {\[Infinity], \[Epsilon]}]], 
                  p_ /; p > nn - \[Delta]Max], {t, nn - \[Delta]Max}];
            SMT1 = Table[{\[Delta], SMT2 = Mean[ SMT3 = DeleteCases[
                          SMT4 = Table[If[Length[neigh[[t]]] == 0, "d",
                                
                                Log[Mean[
                                    
                  Abs[data[[t + (m - 1) \[Tau] + \[Delta]]] - 
                                        
                    data[[neigh[[t]] + (m - 1) \[Tau] + \[Delta]]]]]]],
                              {t, nn - \[Delta]Max}], 
             "d" | Indeterminate]]},
                {\[Delta], 0, \[Delta]Max}]], {m, mMax}];
      s = Lya[dataa, 1, 1, 0.001, 20, 1];
      ll = Fit[s[[1]], {1, x}, x][[2]]/x;
      If[Length[ll] > 1,
        n = 1; While[
          
     IntervalMemberQ[Interval[{-Infinity, Infinity}], SMT1[[n]][[2]]], 
          Take[SMT1[[n]]]; n++];
        n;
        If[n == 1, 0, 
     lll = Fit[Take[s[[1]], n - 1], {1, x}, x][[2]]/x], ll]
       );

(* RQA*)

 f1 = Compile[{{n, _Real, 
        1}}, (Count[
            Flatten[UnitStep[
                0.1*Sqrt[Variance[n]] - 
                  
         Table[Sqrt[Abs[(n[[i]] - n[[j]])^2]], {i, 1, Length[n]}, {j, 
           1, 
                      Length[n]}]]], 1] - (Length[n] + 1))/(Length[
      n]^2), 
    CompilationTarget -> "C", RuntimeAttributes -> Listable, 
    RuntimeOptions -> "Speed"]


ClearAll[RpRR];
RpRR[data_] := 
  Module[{rr, N1, idx, R, SR, RR, DDE, DET, i, j, DE}, 
    rr = 0.01*Sqrt[Variance[data]];
    N1 = Length[data];
    R = ConstantArray[0, {N1, N1}];
    idx = 
   Nearest[data -> Automatic, data, {\[Infinity], rr}][[All, 2 ;;]];
    MapIndexed[{x, y} \[Function] R[[y, x]] = 1, idx];
    R;
    SR = Total[Total[R]];
    RR = SR/(N1^2);
    N[{RR}]
    ]

ClearAll[Rp1];
Rp1[data_] := 
  Module[{rr, N1, idx, R, SR, RR, DDE, DET, i, j, DE}, 
    rr = 0.01*Sqrt[Variance[data]];
    N1 = Length[data];
    R = ConstantArray[0, {N1, N1}];
    idx = 
   Nearest[data -> Automatic, data, {\[Infinity], rr}][[All, 2 ;;]];
    MapIndexed[{x, y} \[Function] R[[y, x]] = 1, idx];
    R;
    SR = Total[Total[R]];
    RR = SR/(N1^2);
    oneCount[list_, len_] := 
      Total@UnitStep[
          
     ListCorrelate[ArrayPad[ConstantArray[1, len], 1, -1], 
       list, {2, -2}, 0] -
             len];
    DE = Total[
        Table[
     oneCount[Diagonal[R, i], 1], {i, 1, Length[Diagonal[R, 1]]}]] ;
    DET = (SR - 2*DE )/SR;
    N[{RR, DET}]
    ]

ClearAll[Rp3];
Rp3[data_] := 
  Module[{rr, N1, idx, R, SR, RR, DDE, DET, i, j, ENTR, pp, F, L, l}, 
    rr = 0.01*Sqrt[Variance[data]];
    N1 = Length[data];
    R = ConstantArray[0, {N1, N1}];
    idx = 
   Nearest[data -> Automatic, data, {\[Infinity], rr}][[All, 2 ;;]];
    MapIndexed[{x, y} \[Function] R[[y, x]] = 1, idx];
    R;
    
    Smat[Mat_] := (
        oneCount[list_, len_] := 
          Total@UnitStep[
              
       ListCorrelate[ArrayPad[ConstantArray[1, len], 1, -1], 
         list, {2, -2}, 
                  0] - len];
        oo = Table[
            Table[oneCount[Diagonal[Mat, j], i], {i, 1, 
                Length[Diagonal[Mat, j]]}], {j, 1, Length[Mat] - 1}];
        Yout = 
     Total@Table[
       Flatten[{oo[[i]], Table[0, {i - 1}]}], {i, Length[oo]}]
        );
    Yout = Smat[R];
    S = 2*Yout;
    SR = 0;
    For[i = 1, i < N1, i++,  
                 SR = SR + i*S[[i]];];
    RR = SR/(N1^2);
    Lmin = 2;
    If[SR == 0,
      DET = 0,
      DET = (SR - Sum[S[[i]], {i, Lmin - 1}])/SR;];
    
    pp = S/Sum[S[[i]], {i, Length[S]}];
    entropy = 0;
    F = Complement[Table[{i}, {i, Lmin, Length[S]}], Position[S, 0]];
    l = Length[F];
    
    If[l == 0, ENTR = 0, 
      ENT = Table[pp[[F[[i]]]]*Log[pp[[F[[i]]]]], {i, 1, Length[F]}];
      ENTR = - Sum[ENT[[i]], {i, 1, Length[ENT]}]
      ];
    L = (SR - S[[1]])/Sum[S[[i]], {i, Lmin, Length[S]}];
    
    N[{RR, DET, ENTR[[1]], L}]
    ]

ClearAll[RpAl];
RpAl[data_] := 
  Module[{rr, N1, idx, R, SR, RR, DDE, DET, i, j, L, ENTR}, 
    rr = 0.01*Sqrt[Variance[data]];
    N1 = Length[data];
    R = ConstantArray[0, {N1, N1}];
    idx = 
   Nearest[data -> Automatic, data, {\[Infinity], rr}][[All, 2 ;;]];
    MapIndexed[{x, y} \[Function] R[[y, x]] = 1, idx];
    R;
    allSequences[list_] := 
      Tally[
    Length /@ Split[list][[If[list[[1]] == 1, 1, 2] ;; -1 ;; 2]]];
    dat = 
   Flatten[Table[
     Flatten[{Diagonal[R, i], {0}}], {i, 1, Length[R] - 1}]];
    TD = Total[Total[R]];
    RR = TD/(N1^2);
    oo = allSequences[dat];
    s1 = SortBy[oo, #[[1]] &];
    DET = (TD - 2*s1 [[1]][[2]] )/TD;
    L = (TD - 2* s1[[1]][[2]])/
    Total[Table[s1[[i]][[2]]*2, {i, 2, Length[s1]}]];
    s2 = 2* Table[s1[[i]][[2]], {i, 1, Length[s1]}];
    s3 = Drop[s2, 1] /Total[s2];
    ENTR = -Total[Log[s3]*s3];
    N[{RR, DET, ENTR, L}]
    ]

ClearAll[RpDiag];
RpDiag[data_] := 
  Module[{rr, N1, idx, R, SR, RR, DDE, DET, i, j}, 
    rr = 0.01*Sqrt[Variance[data]];
    N1 = Length[data];
    R = ConstantArray[0, {N1, N1}];
    idx = 
   Nearest[data -> Automatic, data, {\[Infinity], rr}][[All, 2 ;;]];
    MapIndexed[{x, y} \[Function] R[[y, x]] = 1, idx];
    R;
    TOT[li_] := Total[Select[kk, MemberQ[Take[#, 1], li] &]][[2]];
    ii = Table[allSequences[Diagonal[R, i]], {i, 1, Length[R] - 2}] ;
    kk = SortBy[Flatten[Take[ii, Length[ii]], 1], #[[1]] &] ;
    po = Union[Table[kk[[i]][[1]], {i, 1, Length[kk]}] ]; 
    Yout = TOT /@ po;
    S = 2*Yout;
    TD = Total[Total[R]];
    RR = TD/(N1^2);
    DET = (TD - S[[1]])/TD;
    L = (TD - S[[1]])/Total[Table[S[[i]], {i, 2, Length[S]}]];
    s3 = Drop[S, 1] /Total[S];
    ENTR = -Total[Log[s3]*s3];
    N[{RR, DET, ENTR, L}]
    ]



  
  
  
  
  
  
  
  
  EnD = 100;
EnD1 = 1000;
EnD2 = 10000;
step = 0.01;


 fceX[r_, nn_] := ( (* detrministic chaos logistic map *)
      Clear[x]; x[1] = 0.1; 
   x[n4_] := x[n4] = r x[n4 - 1] (1 - x[n4 - 1]);
      Table[N[x[n4]], {n4, 1, nn}]
      );


Clear[r, x]; x0 = 0.1;
ziskejAtraktor[r_] := (
   dataL = 
    RecurrenceTable[{x[n5] == r x[n5 - 1] (1 - x[n5 - 1]), 
      x[0] == x0}, x, {n5, 0, 100}];
   dataA = dataL[[-30 ;; Length[dataL]]];
   Transpose[{Table[r, {i, 1, Length[dataA]}], dataA}]
   );
dataX = Table[ziskejAtraktor[r], {r, 2, 4, 0.01}];
figX = ListPlot[Flatten[dataX, 1], PlotStyle -> Gray]


 tA[];
T1 = AbsoluteTiming[
      dat1 = 
     ParallelTable[{ii, BoxCount1[fceX[ii, EnD1]]}, {ii, 2.01, 4, 
              step}];][[1]]
tB[];


 Show[{ListPlot[dat1, PlotStyle -> Black], figX}, AspectRatio -> 1, 
  PlotRange -> {{2., 4}, {0, 1}}]


tA[];
T2 = AbsoluteTiming[
   dat2 = ParallelTable[{ii, corrDIMdim1[fceX[ii, EnD1]]}, {ii, 2.01, 
       4, step}];][[1]]
tB[];


Show[{ListPlot[dat2, PlotStyle -> Black], figX}, AspectRatio -> 1, 
 PlotRange -> {{2., 4}, {0, 1}}]



tA[];
T3 = AbsoluteTiming[
   dat3 = ParallelTable[{ii, Lyapun2[Flatten[fceX[ii, EnD1]]]}, {ii, 
       2.01, 4, step}];][[1]]
tB[];


Show[{ListPlot[dat3, PlotStyle -> Black], figX}, AspectRatio -> 1, 
 PlotRange -> {{2., 4}, {-3, 1}}]



tA[];
T6 = AbsoluteTiming[
   dat6 = ParallelTable[{ii, RpAl[fceX[ii, EnD1]]}, {ii, 2., 4, 
       step}];][[1]]
tB[];


Show[{ListPlot[
   dat6D = Table[{dat6[[i]][[1]], dat6[[i]][[2]][[1]]}, {i, 1, 
      Length[dat3]}], PlotStyle -> Black], figX}, AspectRatio -> 1, 
 PlotRange -> {{2., 4}, {0, 1}}] 


Show[{ListPlot[
   dat6D = Table[{dat6[[i]][[1]], dat6[[i]][[2]][[2]]}, {i, 1, 
      Length[dat3]}], PlotStyle -> Black], figX}, AspectRatio -> 1, 
 PlotRange -> {{2., 4}, {0, 1}}] 


D63 = Table[{dat6[[i]][[1]], dat6[[i]][[2]][[3]]}, {i, 1, 
    Length[dat3]}];

Show[{ListPlot[
   dat6C = Table[{dat6[[i]][[1]], dat6[[i]][[2]][[3]]/Max[D63]}, {i, 
      1, Length[dat3]}], PlotStyle -> Black], figX}, AspectRatio -> 1,
  PlotRange -> {{2., 4}, {0, 1}}]  (*Znormovane*)


D64 = Table[{dat6[[i]][[1]], dat6[[i]][[2]][[4]]}, {i, 1, 
    Length[dat3]}];

Show[{ListPlot[
   dat6D = Table[{dat6[[i]][[1]], dat6[[i]][[2]][[4]]/Max[D64]}, {i, 
      1, Length[dat3]}], PlotStyle -> Black], figX}, AspectRatio -> 1,
  PlotRange -> {{2., 4}, {0, 1}}] 


